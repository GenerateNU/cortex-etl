const fs = require("fs");
const { exec, execSync } = require("child_process");
const util = require("util");
const execAsync = util.promisify(exec);

console.log("🔧 Initializing Cortex ETL development environment...");

async function initializeSupabaseCLI() {
  try {
    // Step 1: Install Supabase CLI as dev dependency
    console.log("📦 Installing Supabase CLI as dev dependency...");
    try {
      // Check if already in package.json
      const packageJson = JSON.parse(fs.readFileSync("package.json", "utf8"));
      if (!packageJson.devDependencies?.supabase) {
        console.log("⬇️  Adding supabase to devDependencies...");
        execSync("npm install -D supabase", { stdio: "inherit" });
        console.log("✅ Supabase CLI installed as dev dependency");
      } else {
        console.log("✅ Supabase CLI already installed");
      }
    } catch (error) {
      console.log("⬇️  Installing Supabase CLI...");
      execSync("npm install -D supabase", { stdio: "inherit" });
      console.log("✅ Supabase CLI installed");
    }

    // Step 2: Initialize Supabase project if needed
    if (!fs.existsSync("supabase")) {
      console.log("🚀 Initializing Supabase project...");
      execSync("npx supabase init", { stdio: "inherit" });
      console.log("✅ Supabase project initialized");
    } else {
      console.log("✅ Supabase project already exists");
    }

    // Step 3: Start Supabase services
    console.log("🏃 Starting Supabase services...");
    execSync("npx supabase start", { stdio: "inherit" });
    console.log("✅ Supabase services started");

    // Step 4: Get environment variables from CLI status
    console.log("🔑 Extracting keys from Supabase CLI...");
    const { stdout } = await execAsync("npx supabase status");
    const cliEnv = parseSupabaseStatus(stdout);

    // Step 5: Generate .env file
    console.log("📝 Generating .env file...");
    const envContent = generateEnvFile(cliEnv);
    fs.writeFileSync(".env", envContent);

    console.log("✅ Environment file created");
    console.log("🎉 Development environment ready!");
    console.log("");
    console.log("🌐 Access points:");
    console.log(`   API: http://localhost:54321`);
    console.log(`   Studio: http://localhost:54323`);
    console.log(
      `   Database: postgresql://postgres:postgres@localhost:54322/postgres`
    );
  } catch (error) {
    console.error("❌ Initialization failed:", error.message);
    process.exit(1);
  }
}

function parseSupabaseStatus(output) {
  const env = {};
  const lines = output.split("\n");

  lines.forEach((line) => {
    const trimmedLine = line.trim();

    // Parse different line formats from status output
    if (trimmedLine.includes("API URL:")) {
      env.SUPABASE_URL = trimmedLine.split("API URL:")[1].trim();
    } else if (trimmedLine.includes("DB URL:")) {
      env.DB_URL = trimmedLine.split("DB URL:")[1].trim();
    } else if (trimmedLine.includes("Studio URL:")) {
      env.STUDIO_URL = trimmedLine.split("Studio URL:")[1].trim();
    } else if (trimmedLine.includes("anon key:")) {
      env.SUPABASE_ANON_KEY = trimmedLine.split("anon key:")[1].trim();
    } else if (trimmedLine.includes("service_role key:")) {
      env.SUPABASE_SERVICE_ROLE_KEY = trimmedLine
        .split("service_role key:")[1]
        .trim();
    } else if (trimmedLine.includes("JWT secret:")) {
      env.JWT_SECRET = trimmedLine.split("JWT secret:")[1].trim();
    }
  });

  return env;
}

function generateEnvFile(cliEnv) {
  return `# Generated by Supabase CLI - ${new Date().toISOString()}
# Supabase Configuration
SUPABASE_URL=${cliEnv.SUPABASE_URL || "http://localhost:54321"}
ANON_KEY=${cliEnv.SUPABASE_ANON_KEY || ""}
SERVICE_ROLE_KEY=${cliEnv.SUPABASE_SERVICE_ROLE_KEY || ""}

# Docker configuration
DOCKERFILE=Dockerfile.dev

# Frontend variables
NODE_ENV=development
VITE_SUPABASE_URL=http://localhost:54321
VITE_SUPABASE_ANON_KEY=${cliEnv.SUPABASE_ANON_KEY || ""}
VITE_API_BASE_URL=http://localhost:8000

# Backend variables
ENVIRONMENT=development
SUPABASE_SERVICE_ROLE_KEY=${cliEnv.SUPABASE_SERVICE_ROLE_KEY || ""}

# Additional CLI info
STUDIO_URL=${cliEnv.STUDIO_URL || "http://localhost:54323"}
DB_URL=${
    cliEnv.DB_URL || "postgresql://postgres:postgres@localhost:54322/postgres"
  }
JWT_SECRET=${cliEnv.JWT_SECRET || ""}
`;
}

// Create network if it doesn't exist (keeping for Docker Compose compatibility)
exec("docker network inspect cortex-network", (error) => {
  if (error) {
    exec("docker network create cortex-network", () => {
      console.log("🌐 Created cortex-network");
    });
  } else {
    console.log("🌐 Network cortex-network already exists");
  }
});

// Run initialization
initializeSupabaseCLI();
